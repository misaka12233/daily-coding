# 1008

观察发现加体力的道具收益和休息是一样的，加属性的道具收益不如训练，增加训练效果的道具收益和训练一样。

得到有体力就训练，没体力就休息的决策，于是回合数$n$为偶数时属性值直接$(n/2)*15$。

考虑回合数$n$为奇数的情况，训练休息轮流的策略会导致一个回合没有收益，考虑通过比赛和道具来获得这一个回合的收益。

首先需要通过一个加$50$的体力药或者两个加$25$的小体力药来获得比赛消耗的体力。相当于消耗一个回合但不消耗体力，获得$50$商店币，将多余的一个回合转化为了商店币。

然后考虑通过商店币能获得的属性，$50$商店币能转化为一次加$6$的属性书或者两次加$3$的小属性书。

所以$n$为奇数时被分为：浪费一个回合，属性多加$3$，属性多加$6$，属性多加$7$，一共四种情况，分别计算出对应的概率即可。

# 1010

考虑绝对值拆开维护，当$a_i<x$时，$a_i=x-a_i$，当$a_i>x$时，$a_i=a_i-x$。

对于$a_i\geq x$的情况，直接通过线段树维护。

对于$a_i<x$的情况，相当于将$a_i$取反并且加上$x$。考虑在线段树上维护这个东西，在一直处于$a_i<x$的情况下，每次操作会将$x_1-x_2+x_3-…+x_{j-1}-a_i$变化为$-x_1+x_2-x_3-…-x_{j-1}+x_j+a_i$,这时可以发现$a_i$的数值不发生变化，只有符号改变,$x$标记可以直接叠加维护，所以也可以通过线段树维护。

根据$x_{j-1} \leq x_j$的性质，发现如果$a_i<x_{j-1}$，修改后的$|a_i-x_{j-1}|\leq x_{j-1} \leq x_j$，所以从$a_i \geq x$转变为$a_i<x$的情况后就不会改变，所以转变总的次数是有限的。

直接将数分为两类，分别通过线段树维护，在$a_i \geq x$转变为$a_i<x$时暴力的从一棵树转移到另一棵树上。

因为暴力修改的次数是有限的，所以总的复杂度为$O(nlogn+mlogn)$。

# 1011

和1010的操作是类似的，但是去掉了$x$不递减的性质之后对于$a_i$取反的操作标记不能叠加，所以难以直接通过线段树维护。

考虑分块，对于数的标号分块，每一个块建一个平衡树进行维护，平衡树的关键字为数的大小。

对于整块的操作，可以将平衡树分为小于$x$和大于等于$x$，对于小于的部分进行翻转和加操作，对于大于等于的部分直接进行加操作。因为在$a_l<a_r$时，$x-a_l < x \leq x+a_r$，所以仍然满足平衡树的要求。

对于零散块直接重构整颗平衡树。

此时的复杂度为$O(m\lfloor\frac{n}{q}\rfloor*log_q+mq*log_q)$,其中$q$为块的大小，为$\sqrt{n}$时总复杂度为$O(m\sqrt{n}*log_{\sqrt{n}})$。

考虑进一步优化，发现对于零散块，没有进行修改的数显然大小关系不变，对于修改的数可以分为小于$x$和大于等于$x$两类，两类内部的大小关系也不变，所以可以将修改后的零散块分为三个分别有序的序列。

显然可以通过$O(n)$的做法合并这三个有序的序列，得到修改后的按数的大小排列的序列，再通过$O(n)$的建树得到重构后的平衡树。这时我们得到了一个$O(q)$的零散块做法，$q$为块的大小。

因为零散块的做法优于整块，考虑对于块的大小进行平衡，可以得到在块大小为$\sqrt{nlog_n}$近似最优，此时总的复杂度大约为$O(m \sqrt{nlog_n})$

如果你的常数足够优秀，或许不需要进行零散块的优化和块大小的调整也能通过此题。

# 1012
